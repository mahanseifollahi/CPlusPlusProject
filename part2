#include <iostream>  
#include <vector>  
#include <cmath>  

const double PI = 3.14159;  

template <typename T>  
class Shape {  
public:  
    virtual double getVolume() const = 0;  
    virtual double getSurfaceArea() const = 0;  
    virtual void display(std::ostream& out) const = 0;  
    virtual Shape* clone() const = 0;  
    virtual ~Shape() {}  
};  

template <typename T>  
class Cylinder : public Shape<T> {  
    T height, radius;  

public:  
    Cylinder(T h, T r) : height(h), radius(r) {}  

    double getVolume() const override {  
        return PI * radius * radius * height;  
    }  

    double getSurfaceArea() const override {  
        return 2 * PI * radius * (radius + height);  
    }  

    void display(std::ostream& out) const override {  
        out << "Cylinder: height=" << height << ", radius=" << radius;  
    }  

    Cylinder* clone() const override {  
        return new Cylinder(*this);  
    }  
};  

template <typename T>  
class Box : public Shape<T> {  
    T length;  

public:  
    Box(T l) : length(l) {}  

    double getVolume() const override {  
        return length * length * length;  
    }  

    double getSurfaceArea() const override {  
        return 6 * length * length;  
    }  

    void display(std::ostream& out) const override {  
        out << "Box: length=" << length;  
    }  

    Box* clone() const override {  
        return new Box(*this);  
    }  
};  

template <typename T>  
class Sphere : public Shape<T> {  
    T radius;  

public:  
    Sphere(T r) : radius(r) {}  

    double getVolume() const override {  
        return (4.0 / 3.0) * PI * radius * radius * radius;  
    }  

    double getSurfaceArea() const override {  
        return 4 * PI * radius * radius;  
    }  

    void display(std::ostream& out) const override {  
        out << "Sphere: radius=" << radius;  
    }  

    Sphere* clone() const override {  
        return new Sphere(*this);  
    }  
};  

template <typename T>  
class Container {  
    std::string name;  
    std::vector<Shape<T>*> shapes;  

public:  
    Container(const std::string& containerName) : name(containerName) {}  

    void addShape(const Shape<T>& shape) {  
        shapes.push_back(shape.clone());  
    }  

    double totalVolume() const {  
        double total = 0;  
        for (const auto& shape : shapes) {  
            total += shape->getVolume();  
        }  
        return total;  
    }  

    ~Container() {  
        for (auto shape : shapes) delete shape;  
    }  

    friend std::ostream& operator<<(std::ostream& out, const Container& container) {  
        out << "Container: " << container.name << "\n";  
        out << "Total Volume: " << container.totalVolume() << "\n";  
        for (const auto& shape : container.shapes) {  
            shape->display(out);  
            out << "\n";  
        }  
        return out;  
    }  
};  

int main() {  
    // Create a container and add shapes  
    Container<double> mainContainer("Main Container");  
    mainContainer.addShape(Box<double>(2.0));  
    mainContainer.addShape(Sphere<double>(3.0));  
    mainContainer.addShape(Cylinder<double>(5.0, 2.0));  

    // Display the properties of the container  
    std::cout << mainContainer;  

    return 0;  
}
